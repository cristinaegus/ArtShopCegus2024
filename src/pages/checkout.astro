---
import Layout from '../layouts/Layout.astro';
import { cartItems, getTotal } from '../Store/cartStore';
---

<Layout title="Checkout | Art Shop">
  <main class="max-w-4xl mx-auto px-4 py-8">
    <h1 class="text-3xl font-bold mb-8">Checkout</h1>
    
    <div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
      <!-- Order Summary -->
      <div class="lg:col-span-2">
        <div class="bg-white rounded-lg shadow-md p-6 mb-6">
          <h2 class="text-xl font-semibold mb-4">Order Summary</h2>
          <div class="space-y-4" id="checkout-items">
            <div id="checkout-loading" class="text-center text-gray-400">Loading your cart...</div>
          </div>
          <div id="cart-summary-info" class="mt-4 text-sm text-gray-700"></div>
        </div>

        <!-- Shipping Information -->
        <div class="bg-white rounded-lg shadow-md p-6">
          <h2 class="text-xl font-semibold mb-4">Shipping Information</h2>
          <form id="checkout-form" class="space-y-4">
            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label for="firstName" class="block text-sm font-medium text-gray-700">First Name</label>
                <input type="text" id="firstName" name="firstName" required
                  class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-purple-500 focus:ring-purple-500">
              </div>
              <div>
                <label for="lastName" class="block text-sm font-medium text-gray-700">Last Name</label>
                <input type="text" id="lastName" name="lastName" required
                  class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-purple-500 focus:ring-purple-500">
              </div>
            </div>
            
            <div>
              <label for="email" class="block text-sm font-medium text-gray-700">Email</label>
              <input type="email" id="email" name="email" required
                class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-purple-500 focus:ring-purple-500">
            </div>
            
            <div>
              <label for="address" class="block text-sm font-medium text-gray-700">Address</label>
              <input type="text" id="address" name="address" required
                class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-purple-500 focus:ring-purple-500">
            </div>
            
            <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
              <div>
                <label for="city" class="block text-sm font-medium text-gray-700">City</label>
                <input type="text" id="city" name="city" required
                  class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-purple-500 focus:ring-purple-500">
              </div>
              <div>
                <label for="state" class="block text-sm font-medium text-gray-700">State</label>
                <input type="text" id="state" name="state" required
                  class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-purple-500 focus:ring-purple-500">
              </div>
              <div>
                <label for="zipCode" class="block text-sm font-medium text-gray-700">ZIP Code</label>
                <input type="text" id="zipCode" name="zipCode" required
                  class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-purple-500 focus:ring-purple-500">
              </div>
            </div>
          </form>
        </div>
      </div>

      <!-- Order Total -->
      <div class="lg:col-span-1">
        <div class="bg-white rounded-lg shadow-md p-6 sticky top-4">
          <h2 class="text-xl font-semibold mb-4">Order Total</h2>
          <div class="space-y-3">
            <div class="flex justify-between">
              <span>Subtotal</span>
              <span id="subtotal">$0.00</span>
            </div>
            <div class="flex justify-between">
              <span>Shipping</span>
              <span>$9.99</span>
            </div>
            <div class="border-t pt-3">
              <div class="flex justify-between font-semibold">
                <span>Total</span>
                <span id="total">$0.00</span>
              </div>
            </div>
            <button id="place-order" class="w-full bg-purple-500 text-white py-2 px-4 rounded hover:bg-purple-600 transition duration-300 mt-4">
              Place Order
            </button>
          </div>
        </div>
      </div>
    </div>
  </main>
</Layout>

<script>
  import { cartItems, getTotal } from '../Store/cartStore';

  // Función para calcular el subtotal sumando precio * cantidad de cada producto
  function calculateSubtotal(items) {
    if (!Array.isArray(items)) return 0;
    // Log para depuración
    console.log('Carrito recibido para calcular subtotal:', items);
    const subtotal = items.reduce((acc, item) => {
      // Si no hay quantity, asumir 1
      const cantidad = (typeof item.quantity === 'number' && !isNaN(item.quantity)) ? item.quantity : 1;
      if (typeof item.price !== 'number' || isNaN(item.price)) {
        console.warn('Item sin datos correctos:', item);
        return acc;
      }
      return acc + (item.price * cantidad);
    }, 0);
    console.log('Subtotal calculado:', subtotal);
    return subtotal;
  }

  // Función para obtener el resumen del carrito
  function getCartSummary() {
    const items = cartItems.get();
    const subtotal = calculateSubtotal(items);
    const shipping = 9.99;
    const total = subtotal + shipping;
    return {
      items,
      subtotal,
      shipping,
      total
    };
  }

  // Mostrar el resumen del carrito en la interfaz
  function renderCartSummaryInfo() {
    const summary = getCartSummary();
    const infoDiv = document.getElementById('cart-summary-info');
    if (!infoDiv) return;
    if (!Array.isArray(summary.items) || summary.items.length === 0) {
      infoDiv.textContent = '';
      return;
    }
    infoDiv.innerHTML = `
      <div><strong>Productos en carrito:</strong> ${summary.items.length}</div>
      <div><strong>Subtotal:</strong> €${summary.subtotal.toFixed(2)}</div>
      <div><strong>Envío:</strong> €${summary.shipping.toFixed(2)}</div>
      <div><strong>Total:</strong> €${summary.total.toFixed(2)}</div>
    `;
  }

  function updateOrderSummary() {
    const items = cartItems.get();
    const checkoutItems = document.getElementById('checkout-items');
    const subtotalElement = document.getElementById('subtotal');
    const totalElement = document.getElementById('total');
    const loadingDiv = document.getElementById('checkout-loading');

    // Esperar a que el store esté realmente inicializado
    if (!Array.isArray(items)) {
      if (loadingDiv) loadingDiv.textContent = 'Loading your cart...';
      return;
    }

    if (items.length === 0) {
      if (loadingDiv) loadingDiv.textContent = 'Your cart is empty.';
      // Ya no redirige automáticamente, solo muestra el mensaje
      return;
    }
    // Mostrar advertencia solo si falta el precio
    if (!items.every(item => typeof item.price === 'number')) {
      if (loadingDiv) loadingDiv.textContent = 'Error: Los productos del carrito no tienen datos válidos.';
      return;
    }

    if (loadingDiv) loadingDiv.remove();

    const subtotal = calculateSubtotal(items);
    const shipping = 9.99;
    const total = subtotal + shipping;

    checkoutItems.innerHTML = items.map(item => {
      const cantidad = (typeof item.quantity === 'number' && !isNaN(item.quantity)) ? item.quantity : 1;
      return `
      <div class="flex items-center space-x-4">
        <img src="${item.image}" alt="${item.title}" class="w-16 h-16 object-cover rounded"/>
        <div class="flex-1">
          <h3 class="text-sm font-medium">${item.title}</h3>
          <div class="flex items-center space-x-2">
            <span class="text-sm text-gray-500">Quantity: ${cantidad}</span>
            <button class="decrease-qty-btn bg-gray-200 hover:bg-gray-300 text-gray-700 rounded px-2 py-1 text-xs" data-id="${item.id}">-</button>
            <button class="increase-qty-btn bg-gray-200 hover:bg-gray-300 text-gray-700 rounded px-2 py-1 text-xs" data-id="${item.id}">+</button>
          </div>
          <p class="text-sm font-medium">€${(item.price * cantidad).toFixed(2)}</p>
        </div>
      </div>
      `;
    }).join('');

    // Añadir eventos a los botones de disminuir cantidad
    document.querySelectorAll('.decrease-qty-btn').forEach(btn => {
      btn.addEventListener('click', (e) => {
        const id = btn.getAttribute('data-id');
        const item = items.find(i => i.id === id);
        if (!item) return;
        if (item.quantity > 1) {
          import('../Store/cartStore').then(store => {
            store.updateQuantity(id, item.quantity - 1);
          });
        } else {
          import('../Store/cartStore').then(store => {
            store.removeFromCart(id);
          });
        }
      });
    });
    // Añadir eventos a los botones de aumentar cantidad
    document.querySelectorAll('.increase-qty-btn').forEach(btn => {
      btn.addEventListener('click', (e) => {
        const id = btn.getAttribute('data-id');
        const item = items.find(i => i.id === id);
        if (!item) return;
        import('../Store/cartStore').then(store => {
          store.updateQuantity(id, item.quantity + 1);
        });
      });
    });

    subtotalElement.textContent = `€${subtotal.toFixed(2)}`;
    totalElement.textContent = `€${total.toFixed(2)}`;
  }

  // Handle form submission
  document.getElementById('place-order')?.addEventListener('click', async (e) => {
    e.preventDefault();
    
    const form = document.getElementById('checkout-form') as HTMLFormElement;
    if (!form.checkValidity()) {
      form.reportValidity();
      return;
    }

    const formData = new FormData(form);
    const itemsPedido = cartItems.get();
    const subtotalPedido = calculateSubtotal(itemsPedido);
    const shippingPedido = 9.99;
    const totalPedido = subtotalPedido + shippingPedido;
    const orderData = {
      customer: Object.fromEntries(formData),
      items: itemsPedido,
      subtotal: subtotalPedido,
      shipping: shippingPedido,
      total: totalPedido
    };

    try {
      // Here you would typically send the order to your backend
      console.log('Order placed:', orderData);
      
      // Show success message
      alert('Order placed successfully! Thank you for your purchase.');
      
      // Clear cart and redirect to home
      cartItems.set([]);
      window.location.href = '/';
    } catch (error) {
      console.error('Error placing order:', error);
      alert('There was an error processing your order. Please try again.');
    }
  });

  // Update order summary and cart summary info when cart changes
  cartItems.subscribe(() => {
    updateOrderSummary();
    renderCartSummaryInfo();
  });
  // Initial render
  updateOrderSummary();
  renderCartSummaryInfo();
</script>