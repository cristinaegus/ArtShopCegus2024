---
import { removeFromCart, updateQuantity, getTotal } from '../Store/cartStore';
---

<div class="relative" id="shopping-cart">
  <button class="p-2 hover:text-purple-500" id="cart-toggle-btn">
    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="currentColor" viewBox="0 0 24 24" stroke="currentColor">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 3h2l.4 2M7 13h10l4-8H5.4M7 13L5.4 5M7 13l-2.293 2.293c-.63.63-.184 1.707.707 1.707H17m0 0a2 2 0 100 4 2 2 0 000-4zm-8 2a2 2 0 11-4 0 2 2 0 014 0z" />
    </svg>
    <span class="absolute -top-1 -right-1 bg-purple-500 text-white rounded-full w-5 h-5 text-xs flex items-center justify-center cart-count">
      0
    </span>
  </button>
  
  <div class="absolute right-0 mt-2 w-80 bg-white rounded-lg shadow-lg" id="cart-dropdown" style="display: none;">
    <div class="p-4">
      <h3 class="text-lg font-semibold mb-4">Shopping Cart</h3>
      <div class="cart-items">
        <p class="text-gray-500 empty-cart-message">Your cart is empty</p>
      </div>
    </div>
  </div>
</div>

<script>
  // --- Mantener visible el carrito unos segundos tras salir con el mouse ---
  let hideTimeout;
  const cartToggleBtn = document.getElementById('cart-toggle-btn');
  const cartDropdown = document.getElementById('cart-dropdown');

  function showCart() {
    clearTimeout(hideTimeout);
    cartDropdown.style.display = 'block';
  }
  function hideCart() {
    hideTimeout = setTimeout(() => {
      cartDropdown.style.display = 'none';
    }, 600); // 600ms de retardo
  }
  cartToggleBtn.addEventListener('mouseenter', showCart);
  cartToggleBtn.addEventListener('mouseleave', hideCart);
  cartDropdown.addEventListener('mouseenter', showCart);
  cartDropdown.addEventListener('mouseleave', hideCart);
  import { cartItems, removeFromCart, updateQuantity, getTotal } from '../Store/cartStore';

  const cartItemsContainer = document.querySelector('.cart-items');
  const cartCount = document.querySelector('.cart-count');
  const emptyMessage = document.querySelector('.empty-cart-message');

  function updateCart() {
    const items = cartItems.get();
    cartCount.textContent = items.length.toString();

    if (items.length === 0) {
      cartItemsContainer.innerHTML = '<p class="text-gray-500">Your cart is empty</p>';
      return;
    }

    const total = getTotal();
    cartItemsContainer.innerHTML = `
      <div class="space-y-4 max-h-96 overflow-auto">
        ${items.map(item => `
          <div class="flex items-center space-x-4" data-item-id="${item.id}">
            <img src="${item.image}" alt="${item.title}" class="w-16 h-16 object-cover rounded"/>
            <div class="flex-1">
              <h4 class="text-sm font-medium">${item.title}</h4>
              <p class="text-sm text-gray-500">€${item.price}</p>
              <div class="flex items-center space-x-2 mt-1">
                <button class="text-gray-500 hover:text-purple-500 quantity-btn" data-action="decrease">-</button>
                <span class="text-sm">${item.quantity}</span>
                <button class="text-gray-500 hover:text-purple-500 quantity-btn" data-action="increase">+</button>
              </div>
            </div>
            
            <button class="text-red-500 hover:text-red-600 remove-btn">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd" />
              </svg>
            </button>
          </div>
        `).join('')}
      </div>
      <div class="mt-4 pt-4 border-t">
        <div class="flex justify-between items-center mb-4">
          <span class="font-semibold">Total:</span>
          <span class="text-purple-500 font-semibold">€${total.toFixed(2)}</span>
        </div>
        <a href="/checkout" class="block w-full" id="proceed-to-checkout-link">
          <button class="w-full bg-purple-500 text-white py-2 px-4 rounded hover:bg-purple-600 transition duration-300">
            Proceed to Checkout
          </button>
        </a>
      </div>
    `;

    // Add event listeners to the new elements
    setupEventListeners();
    // Evitar que el carrito se oculte al hacer clic en el enlace de checkout
    const checkoutLink = document.getElementById('proceed-to-checkout-link');
    if (checkoutLink) {
      checkoutLink.addEventListener('mousedown', (e) => {
        // No ocultar el carrito al hacer clic, dejar que la navegación ocurra normalmente
        // y el menú se cerrará solo al cambiar de página
        // Si quieres forzar el cierre, puedes hacerlo aquí, pero no es necesario
      });
    }
    // Si el carrito tiene elementos, mostrar el dropdown si el mouse está sobre el botón
    if (cartDropdown && cartDropdown.style.display === 'block') {
      showCart();
    }
  }

  function setupEventListeners() {
    document.querySelectorAll('.remove-btn').forEach(btn => {
      btn.addEventListener('click', (e) => {
        const closestElement = (e.target as HTMLElement).closest('[data-item-id]');
        const itemId = (closestElement as HTMLElement).dataset.itemId;
        removeFromCart(itemId);
      });
    });

    document.querySelectorAll('.quantity-btn').forEach(btn => {
      btn.addEventListener('click', (e) => {
        const closestElement = (e.target as HTMLElement).closest('[data-item-id]');
        const itemId = (closestElement as HTMLElement).dataset.itemId;
        const item = cartItems.get().find(i => i.id === itemId);
        const action = (e.target as HTMLElement).dataset.action;

        if (item) {
          updateQuantity(itemId, action === 'increase' ? item.quantity + 1 : item.quantity - 1);
        }
      });
    });
  }



  // Subscribe to cart changes
  cartItems.subscribe(() => {
    updateCart();
  });

  // Initial cart render
  updateCart();
</script>